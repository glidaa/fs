type Project
	@model(queries: null, mutations: null, subscriptions: null)
	@key(name: "byOwner", fields: ["owner"]) {
	id: ID!
	prevProject: ID
	nextProject: ID
	permalink: String!
	title: String!
	notesCount: Int!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
}

type Note
	@model(queries: null, mutations: null, subscriptions: null)
	@key(name: "byOwner", fields: ["owner"])
	@key(name: "byAssignee", fields: ["assignee"])
	@key(name: "byProject", fields: ["projectID"]) {
	id: ID!
	projectID: ID!
	prevNote: ID
	nextNote: ID
	permalink: Int!
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: AWSTimestamp
	watcher: String
	tag: [String!]
	sprint: String
	status: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
	assignee: String!
}

type Comment
	@model(queries: null, mutations: null, subscriptions: null)
	@key(name: "byOwner", fields: ["owner"])
	@key(name: "byNote", fields: ["noteID"]) {
	id: ID!
	noteID: ID!
	content: AWSJSON!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
}

type Mutation {
	createProject(input: CreateProjectInput!): Project
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	createNote(input: CreateNoteInput!): Note
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	createComment(input: CreateCommentInput!): Comment
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	updateProject(input: UpdateProjectInput!): Project
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	updateNote(input: UpdateNoteInput!): Note
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	updateComment(input: UpdateCommentInput!): Comment
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	deleteProjectAndNotes(projectID: ID!): Project
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	deleteNoteAndComments(noteId: ID!): Note
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	deleteComment(commentID: ID!): Comment
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	assignNote(noteID: ID!, assignee: String!): Note
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	disallowNote(noteID: ID!, assignee: String!): Note
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	importData(data: String!): ImportedProjectsList
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
}

type Query {
	getProjectByID(projectID: ID!): Project
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	getProjectByPermalink(permalink: String!): Project
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listOwnedProjects: ProjectsList
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listAssignedProjects: ProjectsList
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listNotesForProject(projectID: ID!): NotesList
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listCommentsForNote(noteID: ID!): CommentsList
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
}

type Subscription {
	onCreateOwnedProject(owner: String!): Project
		@aws_subscribe(mutations: ["createProject"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onImportOwnedProjects(owner: String!): ImportedProjectsList
		@aws_subscribe(mutations: ["importData"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateOwnedProject(owner: String!): Project
		@aws_subscribe(mutations: ["updateProject"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteOwnedProject(owner: String!): Project
		@aws_subscribe(mutations: ["deleteProjectAndNotes"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onAssignNote(assignee: String!): Note
		@aws_subscribe(mutations: ["assignNote"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDisallowNote(assignee: String!): Note
		@aws_subscribe(mutations: ["disallowNote"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateAssignedNoteByProjectID(projectID: ID!, assignee: String!): Note
		@aws_subscribe(mutations: ["updateNote"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteAssignedNoteByProjectID(projectID: ID!, assignee: String!): Note
		@aws_subscribe(mutations: ["deleteNoteAndComments"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onCreateOwnedNoteByProjectID(projectID: ID!): Note
		@aws_subscribe(mutations: ["createNote"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateOwnedNoteByProjectID(projectID: ID!): Note
		@aws_subscribe(mutations: ["updateNote", "assignNote", "disallowNote"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteOwnedNoteByProjectID(projectID: ID!): Note
		@aws_subscribe(mutations: ["deleteNoteAndComments"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onCreateCommentByNoteID(noteID: ID!): Comment
		@aws_subscribe(mutations: ["createComment"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateCommentByNoteID(noteID: ID!): Comment
		@aws_subscribe(mutations: ["updateComment"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteCommentByNoteID(noteID: ID!): Comment
		@aws_subscribe(mutations: ["deleteComment"])
		@function(name: "graphqlresolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
}

input CreateProjectInput {
	prevProject: ID
	nextProject: ID
	permalink: String!
	title: String!
}

input CreateNoteInput {
	projectID: ID!
	prevNote: ID
	nextNote: ID
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: AWSTimestamp
	watcher: String
	tag: [String!]
	sprint: String
	status: String
}

input CreateCommentInput {
	noteID: ID!
	content: AWSJSON!
}

input UpdateProjectInput {
	id: ID!
	prevProject: ID
	nextProject: ID
	permalink: String
	title: String
}

input UpdateNoteInput {
	id: ID!
	prevNote: ID
	nextNote: ID
	note: String
	isDone: Boolean
	task: String
	description: String
	steps: String
	due: AWSTimestamp
	watcher: String
	tag: [String!]
	sprint: String
	status: String
}

input UpdateCommentInput {
	id: ID!
	content: AWSJSON
}

type ProjectsList {
	items: [Project!]
}

type ImportedProjectsList {
	owner: String!
	items: [Project!]
}

type NotesList {
	items: [Note!]
}

type CommentsList {
	items: [Comment!]
}

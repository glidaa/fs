-- MySQL Script generated by MySQL Workbench
-- Sat Mar 19 02:39:23 2022
-- Model: Forwardslash    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema forwardslash
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `forwardslash` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ;
USE `forwardslash` ;

-- -----------------------------------------------------
-- Table `forwardslash`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`users` (
  `username` CHAR(16) NOT NULL,
  `first_name` VARCHAR(16) NOT NULL,
  `last_name` VARCHAR(16) NOT NULL,
  `email` VARCHAR(50) NOT NULL,
  `plan` ENUM('free', 'pro') NOT NULL DEFAULT 'free',
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`username`),
  UNIQUE INDEX `users_email_UNIQUE` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`projects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`projects` (
  `id` CHAR(36) NOT NULL,
  `permalink` VARCHAR(128) NOT NULL,
  `rank` DOUBLE UNSIGNED NOT NULL,
  `title` VARCHAR(255) NOT NULL DEFAULT '',
  `privacy` ENUM('public', 'private') NOT NULL DEFAULT 'public',
  `permissions` ENUM('rw', 'r') NOT NULL DEFAULT 'rw',
  `default_status` CHAR(36) NULL DEFAULT NULL,
  `total_tasks` INT(10) UNSIGNED NOT NULL DEFAULT '0',
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `owner` CHAR(16) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_projects_users_idx` (`owner` ASC),
  UNIQUE INDEX `projects_permalink_UNIQUE` (`permalink` ASC, `owner` ASC),
  CONSTRAINT `projects_rank_UNIQUE` UNIQUE (`owner`, `rank`),
  CONSTRAINT `fk_projects_statuses`
    FOREIGN KEY (`default_status`)
    REFERENCES `forwardslash`.`statuses` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_projects_users`
    FOREIGN KEY (`owner`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`tasks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`tasks` (
  `id` CHAR(36) NOT NULL,
  `project_id` CHAR(36) NOT NULL,
  `permalink` INT NOT NULL,
  `rank` DOUBLE NOT NULL,
  `task` VARCHAR(255) NOT NULL DEFAULT '',
  `description` LONGTEXT NOT NULL DEFAULT '',
  `due` TIMESTAMP NOT NULL DEFAULT '0000-00-00 00:00:00',
  `tags` JSON NOT NULL DEFAULT '[]',
  `status` CHAR(36) NOT NULL,
  `priority` ENUM('high', 'normal', 'low') NOT NULL DEFAULT 'normal',
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_tasks_projects_idx` (`project_id` ASC),
  UNIQUE INDEX `tasks_permalink_UNIQUE` (`permalink` ASC, `project_id` ASC),
  CONSTRAINT `tasks_rank_UNIQUE` UNIQUE (`project_id`, `rank`),
  CONSTRAINT `fk_tasks_projects`
    FOREIGN KEY (`project_id`)
    REFERENCES `forwardslash`.`projects` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tasks_statuses`
    FOREIGN KEY (`status`)
    REFERENCES `forwardslash`.`statuses` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`comments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`comments` (
  `id` CHAR(36) NOT NULL,
  `task_id` CHAR(36) NOT NULL,
  `content` LONGTEXT NOT NULL DEFAULT '',
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `owner` CHAR(16) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_comments_tasks_idx` (`task_id` ASC),
  INDEX `fk_comments_users_idx` (`owner` ASC),
  CONSTRAINT `fk_comments_tasks`
    FOREIGN KEY (`task_id`)
    REFERENCES `forwardslash`.`tasks` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comments_users`
    FOREIGN KEY (`owner`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `forwardslash`.`statuses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`statuses` (
  `id` CHAR(36) NOT NULL,
  `project_id` CHAR(36) NOT NULL,
  `title` CHAR(50) NOT NULL,
  `synonym` ENUM('todo', 'pending', 'done') NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_statuses_projects_idx` (`project_id` ASC),
  CONSTRAINT `fk_statuses_projects`
    FOREIGN KEY (`project_id`)
    REFERENCES `forwardslash`.`projects` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`history` (
  `id` CHAR(54) NOT NULL,
  `project_id` CHAR(36) NOT NULL,
  `task_id` CHAR(36) NULL DEFAULT NULL,
  `comment_id` CHAR(36) NULL DEFAULT NULL,
  `action` ENUM('create', 'update', 'delete', 'append', 'remove') NOT NULL,
  `field` ENUM('due', 'status', 'priority', 'assignees', 'anonymousAssignees', 'invitedAssignees', 'watchers', 'comment') NOT NULL,
  `value` LONGTEXT NULL DEFAULT NULL,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `owner` CHAR(16) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_history_projects_idx` (`project_id` ASC),
  INDEX `fk_history_tasks_idx` (`task_id` ASC),
  INDEX `fk_history_comments_idx` (`comment_id` ASC),
  INDEX `fk_history_users_idx` (`owner` ASC),
  CONSTRAINT `fk_history_projects`
    FOREIGN KEY (`project_id`)
    REFERENCES `forwardslash`.`projects` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_history_tasks`
    FOREIGN KEY (`task_id`)
    REFERENCES `forwardslash`.`tasks` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_history_comments`
    FOREIGN KEY (`comment_id`)
    REFERENCES `forwardslash`.`comments` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_history_users`
    FOREIGN KEY (`owner`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`projects_members`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`projects_members` (
  `member` CHAR(16) NOT NULL,
  `project_id` CHAR(36) NOT NULL,
  PRIMARY KEY (`member`, `project_id`),
  INDEX `fk_projects_members_projects_idx` (`project_id` ASC),
  INDEX `fk_projects_members_users_idx` (`member` ASC),
  CONSTRAINT `fk_projects_members_users`
    FOREIGN KEY (`member`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_projects_members_projects`
    FOREIGN KEY (`project_id`)
    REFERENCES `forwardslash`.`projects` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`tasks_assignees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`tasks_assignees` (
  `assignee` CHAR(16) NOT NULL,
  `task_id` CHAR(36) NOT NULL,
  PRIMARY KEY (`assignee`, `task_id`),
  INDEX `fk_tasks_assignees_users_idx` (`assignee` ASC),
  INDEX `fk_tasks_assignees_tasks_idx` (`task_id` ASC),
  CONSTRAINT `fk_tasks_assignees_tasks`
    FOREIGN KEY (`task_id`)
    REFERENCES `forwardslash`.`tasks` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tasks_assignees_users`
    FOREIGN KEY (`assignee`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`tasks_anonymous_assignees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`tasks_anonymous_assignees` (
  `assignee` VARCHAR(36) NOT NULL,
  `task_id` CHAR(36) NOT NULL,
  PRIMARY KEY (`assignee`, `task_id`),
  INDEX `fk_tasks_anonymous_assignees_users_idx` (`assignee` ASC),
  INDEX `fk_tasks_anonymous_assignees_tasks_idx` (`task_id` ASC),
  CONSTRAINT `fk_tasks_anonymous_assignees_tasks`
    FOREIGN KEY (`task_id`)
    REFERENCES `forwardslash`.`tasks` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`tasks_invited_assignees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`tasks_invited_assignees` (
  `assignee` VARCHAR(50) NOT NULL,
  `task_id` CHAR(36) NOT NULL,
  PRIMARY KEY (`assignee`, `task_id`),
  INDEX `fk_tasks_invited_assignees_users_idx` (`assignee` ASC),
  INDEX `fk_tasks_invited_assignees_tasks_idx` (`task_id` ASC),
  CONSTRAINT `fk_tasks_invited_assignees_tasks`
    FOREIGN KEY (`task_id`)
    REFERENCES `forwardslash`.`tasks` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`tasks_watchers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`tasks_watchers` (
  `watcher` CHAR(16) NOT NULL,
  `task_id` CHAR(36) NOT NULL,
  PRIMARY KEY (`watcher`, `task_id`),
  INDEX `fk_tasks_watchers_users_idx` (`watcher` ASC),
  INDEX `fk_tasks_watchers_tasks_idx` (`task_id` ASC),
  CONSTRAINT `fk_tasks_watchers_tasks`
    FOREIGN KEY (`task_id`)
    REFERENCES `forwardslash`.`tasks` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tasks_watchers_users`
    FOREIGN KEY (`watcher`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `forwardslash`.`notifications`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `forwardslash`.`notifications` (
  `id` CHAR(36) NOT NULL,
  `history_id` CHAR(54) NOT NULL,
  `read` TINYINT NOT NULL DEFAULT 0,
  `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `owner` CHAR(16) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_notifications_history_idx` (`history_id` ASC),
  INDEX `fk_notifications_users_idx` (`owner` ASC),
  CONSTRAINT `fk_notifications_users`
    FOREIGN KEY (`owner`)
    REFERENCES `forwardslash`.`users` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_notifications_history`
    FOREIGN KEY (`history_id`)
    REFERENCES `forwardslash`.`history` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER $$

-- -----------------------------------------------------
-- procedure create_project
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE create_project (
  IN `id` CHAR(36),
  IN `permalink` VARCHAR(128),
  IN `rank` DOUBLE,
  IN `title` VARCHAR(255),
  IN `privacy` ENUM('public', 'private'),
  IN `permissions` ENUM('rw', 'r'),
  IN `status_set` JSON,
  IN `default_status` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
START TRANSACTION;
INSERT INTO `projects` (
    `id`,
    `permalink`,
    `rank`,
    `title`,
    `privacy`,
    `permissions`,
    `owner`
  )
VALUES(
    `id`,
    `permalink`,
    `rank`,
    `title`,
    `privacy`,
    `permissions`,
    `client`
  );
INSERT INTO `statuses`
SELECT *
FROM JSON_TABLE (`status_set`, '$[*]' COLUMNS (
    `id`  CHAR(36) PATH '$.id', 
    `project_id` CHAR(36) PATH '$.project_id',
    `title` CHAR(50) PATH '$.title',
    `synonym` CHAR(7) PATH '$.synonym'
  )
) AS `tmp`;
UPDATE `projects`
SET `projects`.`default_status` = `default_status`
WHERE `projects`.`id` = `id`
  AND EXISTS (
    SELECT *
    FROM `statuses`
    WHERE `statuses`.`id` = `default_status`
      AND `statuses`.`project_id` = `id`
  );
COMMIT;
END$$

-- -----------------------------------------------------
-- procedure create_project_unsafe
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE create_project_unsafe (
  IN `id` CHAR(36),
  IN `permalink` VARCHAR(128),
  IN `rank` DOUBLE,
  IN `title` VARCHAR(255),
  IN `privacy` ENUM('public', 'private'),
  IN `permissions` ENUM('rw', 'r'),
  IN `status_set` JSON,
  IN `default_status` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
INSERT INTO `projects` (
    `id`,
    `permalink`,
    `rank`,
    `title`,
    `privacy`,
    `permissions`,
    `owner`
  )
VALUES(
    `id`,
    `permalink`,
    `rank`,
    `title`,
    `privacy`,
    `permissions`,
    `client`
  );
INSERT INTO `statuses`
SELECT *
FROM JSON_TABLE (`status_set`, '$[*]' COLUMNS (
    `id`  CHAR(36) PATH '$.id', 
    `project_id` CHAR(36) PATH '$.project_id',
    `title` CHAR(50) PATH '$.title',
    `synonym` CHAR(7) PATH '$.synonym'
  )
) AS `tmp`;
UPDATE `projects`
SET `projects`.`default_status` = `default_status`
WHERE `projects`.`id` = `id`
  AND EXISTS (
    SELECT *
    FROM `statuses`
    WHERE `statuses`.`id` = `default_status`
      AND `statuses`.`project_id` = `id`
  );
END$$

-- -----------------------------------------------------
-- procedure update_project
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_project (
  IN `id` CHAR(36),
  IN `new_permalink` VARCHAR(128),
  IN `new_rank` DOUBLE,
  IN `new_title` VARCHAR(255),
  IN `new_privacy` ENUM('public', 'private'),
  IN `new_permissions` ENUM('rw', 'r'),
  IN `new_status_set` JSON,
  IN `new_default_status` CHAR(36),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `project_owner` CHAR(16)
)
BEGIN
START TRANSACTION;
SELECT `projects`.`owner`
INTO `project_owner`
FROM `projects`
WHERE `projects`.`id` = `id`;
INSERT INTO `statuses`
SELECT *
FROM JSON_TABLE (`status_set`, '$[*]' COLUMNS (
    `id`  CHAR(36) PATH '$.id', 
    `project_id` CHAR(36) PATH '$.project_id',
    `title` CHAR(50) PATH '$.title',
    `synonym` CHAR(7) PATH '$.synonym'
  )
) AS `tmp` ON DUPLICATE KEY UPDATE
  `statuses`.`title` = IF(`statuses`.`project_id` = `id`, `tmp`.`title`, `statuses`.`title`),
  `statuses`.`synonym` = IF(`statuses`.`project_id` = `id`, `tmp`.`synonym`, `statuses`.`synonym`);
UPDATE `projects`
SET `projects`.`permalink` = `new_permalink`,
  `projects`.`rank` = `new_rank`,
  `projects`.`title` = `new_title`,
  `projects`.`privacy` = `new_privacy`,
  `projects`.`permissions` = `new_permissions`,
  `projects`.`default_status` = `new_default_status`
WHERE `projects`.`id` = `id`
  AND (
    `projects`.`owner` = `client`
    OR (
      `projects`.`privacy` = 'public'
      AND `projects`.`permissions` = 'rw'
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  )
  AND EXISTS (
    SELECT *
    FROM `statuses`
    WHERE `statuses`.`project_id` = `id`
      AND `statuses`.`id` = `new_default_status`
  );
IF ROW_COUNT() = 0 THEN
  ROLLBACK;
END IF;
COMMIT;
END$$

-- -----------------------------------------------------
-- procedure update_project_title
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_project_title (
  IN `id` CHAR(36),
  IN `new_title` VARCHAR(255),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `project_owner` CHAR(16)
)
BEGIN
SELECT `projects`.`owner`
INTO `project_owner`
FROM `projects`
WHERE `projects`.`id` = `id`;
UPDATE `projects`
SET `projects`.`title` = `new_title`
WHERE `projects`.`id` = `id`
  AND (
    `projects`.`owner` = `client`
    OR (
      `projects`.`privacy` = 'public'
      AND `projects`.`permissions` = 'rw'
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure delete_project
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE delete_project (
  IN `id` CHAR(36),
  IN `client` CHAR(16),
  OUT `project_owner` CHAR(16)
)
BEGIN
SELECT `projects`.`owner`
INTO `project_owner`
FROM `projects`
WHERE `projects`.`id` = `id`;
DELETE FROM `projects`
WHERE `projects`.`id` = `id`
  AND (
    `projects`.`owner` = `client`
    OR (
      `projects`.`privacy` = 'public'
      AND `projects`.`permissions` = 'rw'
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure list_projects_by_owner
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_projects_by_owner (
  IN `owner` CHAR(16),
  IN `client` CHAR(16)
)
BEGIN
SELECT `projects`.`id`,
  `projects`.`permalink`,
  `projects`.`rank`,
  `projects`.`title`,
  `projects`.`privacy`,
  `projects`.`permissions`,
  (SELECT JSON_ARRAYAGG(
    JSON_MERGE(
      JSON_OBJECT('id', `statuses`.`id`),
      JSON_OBJECT('title', `statuses`.`title`),
      JSON_OBJECT('synonym', `statuses`.`synonym`)
    )
  ) FROM `statuses` WHERE `statuses`.`project_id` = `projects`.`id`) AS 'statusSet',
  `projects`.`default_status` AS 'defaultStatus',
  `projects`.`total_tasks` AS 'totalTasks',
  `projects`.`created_at` AS 'createdAt',
  `projects`.`updated_at` AS 'updatedAt',
  `projects`.`owner`
FROM `projects`
WHERE `projects`.`owner` = `owner`
  AND (
    `projects`.`owner` = `client`
    OR `projects`.`privacy` = 'public'
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure list_assigned_projects
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_assigned_projects (
  IN `assignee` CHAR(16),
  IN `client` CHAR(16)
)
BEGIN
SELECT `projects`.`id`,
  `projects`.`permalink`,
  `projects`.`rank`,
  `projects`.`title`,
  `projects`.`privacy`,
  `projects`.`permissions`,
  (SELECT JSON_ARRAYAGG(
    JSON_MERGE(
      JSON_OBJECT('id', `statuses`.`id`),
      JSON_OBJECT('title', `statuses`.`title`),
      JSON_OBJECT('synonym', `statuses`.`synonym`)
    )
  ) FROM `statuses` WHERE `statuses`.`project_id` = `projects`.`id`) AS 'statusSet',
  `projects`.`default_status` AS 'defaultStatus',
  `projects`.`total_tasks` AS 'totalTasks',
  `projects`.`created_at` AS 'createdAt',
  `projects`.`updated_at` AS 'updatedAt',
  `projects`.`owner`
FROM `tasks_assignees`
  INNER JOIN `tasks` ON `tasks_assignees`.`task_id` = `tasks`.`id`
  INNER JOIN `projects` ON `projects`.`id` = `tasks`.`project_id`
WHERE `tasks_assignees`.`assignee` = `assignee`
  AND (
    `projects`.`owner` = `client`
    OR `projects`.`privacy` = 'public'
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure list_watched_projects
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_watched_projects (
  IN `watcher` CHAR(16),
  IN `client` CHAR(16)
)
BEGIN
SELECT `projects`.`id`,
  `projects`.`permalink`,
  `projects`.`rank`,
  `projects`.`title`,
  `projects`.`privacy`,
  `projects`.`permissions`,
  (SELECT JSON_ARRAYAGG(
    JSON_MERGE(
      JSON_OBJECT('id', `statuses`.`id`),
      JSON_OBJECT('title', `statuses`.`title`),
      JSON_OBJECT('synonym', `statuses`.`synonym`)
    )
  ) FROM `statuses` WHERE `statuses`.`project_id` = `projects`.`id`) AS 'statusSet',
  `projects`.`default_status` AS 'defaultStatus',
  `projects`.`total_tasks` AS 'totalTasks',
  `projects`.`created_at` AS 'createdAt',
  `projects`.`updated_at` AS 'updatedAt',
  `projects`.`owner`
FROM `tasks_watchers`
  INNER JOIN `tasks` ON `tasks_watchers`.`task_id` = `tasks`.`id`
  INNER JOIN `projects` ON `projects`.`id` = `tasks`.`project_id`
WHERE `tasks_watchers`.`watcher` = `watcher`
  AND (
    `projects`.`owner` = `client`
    OR `projects`.`privacy` = 'public'
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure get_project_by_id
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE get_project_by_id (
  IN `id` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
SELECT `projects`.`id`,
  `projects`.`permalink`,
  `projects`.`rank`,
  `projects`.`title`,
  `projects`.`privacy`,
  `projects`.`permissions`,
  (SELECT JSON_ARRAYAGG(
    JSON_MERGE(
      JSON_OBJECT('id', `statuses`.`id`),
      JSON_OBJECT('title', `statuses`.`title`),
      JSON_OBJECT('synonym', `statuses`.`synonym`)
    )
  ) FROM `statuses` WHERE `statuses`.`project_id` = `projects`.`id`) AS 'statusSet',
  `projects`.`default_status` AS 'defaultStatus',
  `projects`.`total_tasks` AS 'totalTasks',
  `projects`.`created_at` AS 'createdAt',
  `projects`.`updated_at` AS 'updatedAt',
  `projects`.`owner`
FROM `projects`
WHERE `projects`.`id` = `id`
  AND (
    `projects`.`owner` = `client`
    OR `projects`.`privacy` = 'public'
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure get_project_by_permalink
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE get_project_by_permalink (
  IN `permalink` VARCHAR(128),
  IN `owner` CHAR(16),
  IN `client` CHAR(16)
)
BEGIN
SELECT `projects`.`id`,
  `projects`.`permalink`,
  `projects`.`rank`,
  `projects`.`title`,
  `projects`.`privacy`,
  `projects`.`permissions`,
  (SELECT JSON_ARRAYAGG(
    JSON_MERGE(
      JSON_OBJECT('id', `statuses`.`id`),
      JSON_OBJECT('title', `statuses`.`title`),
      JSON_OBJECT('synonym', `statuses`.`synonym`)
    )
  ) FROM `statuses` WHERE `statuses`.`project_id` = `projects`.`id`) AS 'statusSet',
  `projects`.`default_status` AS 'defaultStatus',
  `projects`.`total_tasks` AS 'totalTasks',
  `projects`.`created_at` AS 'createdAt',
  `projects`.`updated_at` AS 'updatedAt',
  `projects`.`owner`
FROM `projects`
WHERE `projects`.`permalink` = `permalink`
  AND `projects`.`owner` = `owner`
  AND (
    `projects`.`owner` = `client`
    OR `projects`.`privacy` = 'public'
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.`id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure create_task
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE create_task (
  IN `id` CHAR(36),
  IN `project_id` CHAR(36),
  IN `rank` DOUBLE,
  IN `task` VARCHAR(255),
  IN `description` LONGTEXT,
  IN `due` TIMESTAMP,
  IN `tags` JSON,
  IN `status` CHAR(36),
  IN `priority` ENUM('low', 'normal', 'high'),
  IN `client` CHAR(16)
)
BEGIN
DECLARE `permalink` INT;
START TRANSACTION;
SELECT `projects`.`total_tasks` INTO `permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`
FOR UPDATE;
SET `permalink` = `permalink` + 1;
INSERT INTO `tasks` (
    `id`,
    `project_id`,
    `permalink`,
    `rank`,
    `task`,
    `description`,
    `due`,
    `tags`,
    `status`,
    `priority`
  )
SELECT `id`,
  `project_id`,
  `permalink`,
  `rank`,
  `task`,
  `description`,
  `due`,
  `tags`,
  `status`,
  `priority`
FROM (
    SELECT `id` AS `id`,
      `project_id` AS `project_id`,
      `permalink` AS `permalink`,
      `rank` AS `rank`,
      `task` AS `task`,
      `description` AS `description`,
      `due` AS `due`,
      `tags` AS `tags`,
      `status` AS `status`,
      `priority` AS `priority`
  ) AS `tmp`
WHERE (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tmp`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tmp`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  ) AND EXISTS (
    SELECT *
    FROM `statuses`
    WHERE `statuses`.`id` = `status`
      AND `statuses`.`project_id` = `tmp`.`project_id`
  );
UPDATE `projects`
SET `projects`.`total_tasks` = `permalink`
WHERE `projects`.`id` = `project_id`;
SELECT permalink;
COMMIT;
END$$

-- -----------------------------------------------------
-- procedure create_task_unsafe
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE create_task_unsafe (
  IN `id` CHAR(36),
  IN `project_id` CHAR(36),
  IN `rank` DOUBLE,
  IN `task` VARCHAR(255),
  IN `description` LONGTEXT,
  IN `due` TIMESTAMP,
  IN `tags` JSON,
  IN `status` CHAR(36),
  IN `priority` ENUM('low', 'normal', 'high'),
  IN `client` CHAR(16)
)
BEGIN
DECLARE `permalink` INT;
SELECT `projects`.`total_tasks` INTO `permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`
FOR UPDATE;
SET `permalink` = `permalink` + 1;
INSERT INTO `tasks` (
    `id`,
    `project_id`,
    `permalink`,
    `rank`,
    `task`,
    `description`,
    `due`,
    `tags`,
    `status`,
    `priority`
  )
SELECT `id`,
  `project_id`,
  `permalink`,
  `rank`,
  `task`,
  `description`,
  `due`,
  `tags`,
  `status`,
  `priority`
FROM (
    SELECT `id` AS `id`,
      `project_id` AS `project_id`,
      `permalink` AS `permalink`,
      `rank` AS `rank`,
      `task` AS `task`,
      `description` AS `description`,
      `due` AS `due`,
      `tags` AS `tags`,
      `status` AS `status`,
      `priority` AS `priority`
  ) AS `tmp`
WHERE (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tmp`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tmp`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  ) AND EXISTS (
    SELECT *
    FROM `statuses`
    WHERE `statuses`.`id` = `status`
      AND `statuses`.`project_id` = `tmp`.`project_id`
  );
UPDATE `projects`
SET `projects`.`total_tasks` = `permalink`
WHERE `projects`.`id` = `project_id`;
SELECT permalink;
END$$

-- -----------------------------------------------------
-- procedure notify_task_watcher
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `notify_task_watcher` (
  IN `project_id` CHAR(36),
  IN `task_id` CHAR(36),
  IN `comment_id` CHAR(36),
  IN `mutation_id` CHAR(54),
  IN `action` ENUM('create', 'update', 'delete', 'append', 'remove'),
  IN `field` ENUM('due', 'status', 'priority', 'assignees', 'anonymousAssignees', 'invitedAssignees', 'watchers', 'comment'),
  IN `new` LONGTEXT,
  IN `client` CHAR(16),
  INOUT `recipients` JSON
)
BEGIN
DECLARE `recent_history` CHAR(54) DEFAULT NULL;
DECLARE `loop_done` BOOLEAN DEFAULT FALSE;
DECLARE `notification_id` CHAR(36) DEFAULT "";
DECLARE `recipient` VARCHAR(16) DEFAULT "";
DECLARE `curRecipient` CURSOR FOR
SELECT `tasks_assignees`.`assignee` AS `recipient`
FROM `tasks_assignees`
WHERE `tasks_assignees`.`task_id` = `task_id`
UNION
SELECT `tasks_watchers`.`watcher` AS `recipient`
FROM `tasks_watchers`
WHERE `tasks_watchers`.`task_id` = `task_id`;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET `loop_done` = TRUE;
INSERT INTO `history` (
    `id`,
    `project_id`,
    `task_id`,
    `comment_id`,
    `action`,
    `field`,
    `value`,
    `owner`
  )
VALUES (
    `mutation_id`,
    `project_id`,
    `task_id`,
    `comment_id`,
    `action`,
    `field`,
    `new`,
    `client`
  );
OPEN `curRecipient`;
SET `loop_done` = FALSE;
`getRecipient`: LOOP FETCH `curRecipient` INTO `recipient`;
IF `loop_done` = TRUE THEN
  LEAVE `getRecipient`;
END IF;
SET `notification_id` = UUID();
SET `recipients` = CONCAT(`recipients`, '"', `recipient`, '":"', `notification_id`, '",');
INSERT INTO `notifications` (
    `id`,
    `history_id`,
    `owner`
  )
VALUES (
    `notification_id`,
    `mutation_id`,
    `recipient`
  );
END LOOP `getRecipient`;
CLOSE `curRecipient`;
IF SUBSTRING(`recipients`, -1) = ',' THEN
  SET `recipients` = SUBSTRING(`recipients`, 1, LENGTH(`recipients`) - 1);
END IF;
END$$

-- -----------------------------------------------------
-- procedure update_task_rank
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_task_rank (
  IN `id` CHAR(36),
  IN `new_rank` DOUBLE,
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_rank` DOUBLE,
  OUT `project_id` CHAR(36)
)
BEGIN
SELECT `tasks`.`project_id`, `tasks`.`rank`
INTO `project_id`, `old_rank`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
IF NOT(`old_rank` <=> `new_rank`) THEN
UPDATE `tasks`
SET `tasks`.`rank` = `new_rank`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END IF;
END$$

-- -----------------------------------------------------
-- procedure update_task_task
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_task_task (
  IN `id` CHAR(36),
  IN `new_task` VARCHAR(255),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_task` VARCHAR(255),
  OUT `project_id` CHAR(36)
)
BEGIN
SELECT `tasks`.`project_id`, `tasks`.`task`
INTO `project_id`, `old_task`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
IF NOT(`old_task` <=> `new_task`) THEN
UPDATE `tasks`
SET `tasks`.`task` = `new_task`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END IF;
END$$

-- -----------------------------------------------------
-- procedure update_task_description
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_task_description (
  IN `id` CHAR(36),
  IN `new_description` LONGTEXT,
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_description` LONGTEXT,
  OUT `project_id` CHAR(36)
)
BEGIN
SELECT `tasks`.`project_id`, `tasks`.`description`
INTO `project_id`, `old_description`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
IF NOT(`old_description` <=> `new_description`) THEN
UPDATE `tasks`
SET `tasks`.`description` = `new_description`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END IF;
END$$

-- -----------------------------------------------------
-- procedure update_task_due
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `update_task_due` (
  IN `id` CHAR(36),
  IN `new_due` TIMESTAMP,
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_due` TIMESTAMP,
  OUT `project_id` CHAR(36),
  OUT `recipients` JSON,
  OUT `hint` LONGTEXT,
  OUT `task_permalink` LONGTEXT
)
BEGIN
SET `recipients` = "{";
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`due`, `tasks`.`permalink`
INTO `project_id`, `hint`, `old_due`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
IF NOT(`old_due` <=> `new_due`) THEN
UPDATE `tasks`
SET `tasks`.`due` = `new_due`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
  CALL notify_task_watcher(
    `project_id`,
    `id`,
    NULL,
    `mutation_id`,
    'update',
    'due',
    `new_due`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
END$$

-- -----------------------------------------------------
-- procedure update_task_tags
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_task_tags (
  IN `id` CHAR(36),
  IN `new_tags` JSON,
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_tags` JSON,
  OUT `project_id` CHAR(36)
)
BEGIN
SELECT `tasks`.`project_id`, `tasks`.`tags`
INTO `project_id`, `old_tags`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
IF NOT(`old_tags` <=> `new_tags`) THEN
UPDATE `tasks`
SET `tags` = `new_tags`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END IF;
END$$

-- -----------------------------------------------------
-- procedure update_task_status
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `update_task_status` (
  IN `id` CHAR(36),
  IN `new_status` CHAR(36),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_status` CHAR(36),
  OUT `project_id` CHAR(36),
  OUT `recipients` JSON,
  OUT `hint` LONGTEXT,
  OUT `new_status_title` CHAR(50),
  OUT `task_permalink` LONGTEXT
)
BEGIN
SET `recipients` = "{";
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`status`, `tasks`.`permalink`
INTO `project_id`, `hint`, `old_status`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
IF NOT(`old_status` <=> `new_status`) THEN
UPDATE `tasks`
SET `tasks`.`status` = `new_status`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  )
  AND EXISTS (
    SELECT *
    FROM `statuses`
    WHERE `statuses`.`id` = `new_status`
      AND `statuses`.`project_id` = `tasks`.`project_id`
  );
  SELECT `statuses`.`title`
  INTO `new_status_title`
  FROM `statuses`
  WHERE `statuses`.`id` = `new_status`
    AND `statuses`.`project_id` = `project_id`;
  CALL notify_task_watcher(
    `project_id`,
    `id`,
    NULL,
    `mutation_id`,
    'update',
    'status',
    `new_status`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
END$$

-- -----------------------------------------------------
-- procedure update_task_priority
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `update_task_priority` (
  IN `id` CHAR(36),
  IN `new_priority` ENUM('low', 'normal', 'high'),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54),
  OUT `old_priority` ENUM('low', 'normal', 'high'),
  OUT `project_id` CHAR(36),
  OUT `recipients` JSON,
  OUT `hint` LONGTEXT,
  OUT `task_permalink` LONGTEXT
)
BEGIN
SET `recipients` = "{";
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`priority`, `tasks`.`permalink`
INTO `project_id`, `hint`, `old_priority`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
IF NOT(`old_priority` <=> `new_priority`) THEN
UPDATE `tasks`
SET `tasks`.`priority` = `new_priority`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
  CALL notify_task_watcher(
    `project_id`,
    `id`,
    NULL,
    `mutation_id`,
    'update',
    'priority',
    `new_priority`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
END$$

-- -----------------------------------------------------
-- procedure delete_task
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE delete_task (
  IN `id` CHAR(36),
  IN `client` CHAR(16),
  OUT `project_id` CHAR(36)
)
BEGIN
DECLARE `old_status` CHAR(36);
SELECT `tasks`.`project_id`, `tasks`.`status`
INTO `project_id`, `old_status`
FROM `tasks`
WHERE `tasks`.`id` = `id`;
DELETE FROM `tasks`
WHERE `tasks`.`id` = `id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure list_tasks_by_project_id
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_tasks_by_project_id (
  IN `project_id` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
SELECT `tasks`.`id`,
  `tasks`.`project_id` AS 'projectId',
  `tasks`.`permalink`,
  `tasks`.`rank`,
  `tasks`.`task`,
  `tasks`.`description`,
  `tasks`.`due`,
  `tasks`.`tags`,
  `tasks`.`status`,
  `tasks`.`priority`,
  (SELECT IFNULL((SELECT JSON_ARRAYAGG(`tasks_assignees`.`assignee`) FROM `tasks_assignees` WHERE `tasks_assignees`.`task_id` = `tasks`.`id`), JSON_ARRAY())) AS `assignees`,
  (SELECT IFNULL((SELECT JSON_ARRAYAGG(`tasks_anonymous_assignees`.`assignee`) FROM `tasks_anonymous_assignees` WHERE `tasks_anonymous_assignees`.`task_id` = `tasks`.`id`), JSON_ARRAY())) AS `anonymousAssignees`,
  (SELECT IFNULL((SELECT JSON_ARRAYAGG(`tasks_invited_assignees`.`assignee`) FROM `tasks_invited_assignees` WHERE `tasks_invited_assignees`.`task_id` = `tasks`.`id`), JSON_ARRAY())) AS `invitedAssignees`,
  (SELECT IFNULL((SELECT JSON_ARRAYAGG(`tasks_watchers`.`watcher`) FROM `tasks_watchers` WHERE `tasks_watchers`.`task_id` = `tasks`.`id`), JSON_ARRAY())) AS `watchers`,
  `tasks`.`created_at` AS 'createdAt',
  `tasks`.`updated_at` AS 'updatedAt'
FROM `tasks`
WHERE `tasks`.`project_id` = `project_id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR `projects`.`privacy` = 'public'
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
END$$

-- -----------------------------------------------------
-- procedure get_project_of_task
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE get_project_of_task (
  IN `task_id` CHAR(36),
  IN `client` CHAR(16),
  OUT `project_id` CHAR(36),
  OUT `owner` CHAR(16)
)
BEGIN
SELECT `tasks`.`project_id`
INTO `project_id`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR (
            `projects`.`privacy` = 'public'
            AND `projects`.`permissions` = 'rw'
          )
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  );
SELECT `projects`.`owner`
INTO `owner`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
END$$

-- -----------------------------------------------------
-- procedure add_assignee
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `add_assignee` (
  IN `task_id` CHAR(36),
  IN `assignee` CHAR(16),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
INSERT INTO `tasks_assignees` (`task_id`, `assignee`)
SELECT `task_id`,
  `assignee`
FROM (
    SELECT `task_id` AS `task_id`,
      `assignee` AS `assignee`
  ) AS `tmp`
WHERE EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tmp`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'append',
    'assignees',
    `assignee`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure remove_assignee
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `remove_assignee` (
  IN `task_id` CHAR(36),
  IN `assignee` CHAR(16),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
DELETE FROM `tasks_assignees`
WHERE `tasks_assignees`.`task_id` = `task_id`
  AND `tasks_assignees`.`assignee` = `assignee`
  AND EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tasks_assignees`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'remove',
    'assignees',
    `assignee`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure add_anonymous_assignee
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `add_anonymous_assignee` (
  IN `task_id` CHAR(36),
  IN `assignee` VARCHAR(36),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
INSERT INTO `tasks_anonymous_assignees` (`task_id`, `assignee`)
SELECT `task_id`,
  `assignee`
FROM (
    SELECT `task_id` AS `task_id`,
      `assignee` AS `assignee`
  ) AS `tmp`
WHERE EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tmp`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'append',
    'anonymousAssignees',
    `assignee`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure remove_anonymous_assignee
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `remove_anonymous_assignee` (
  IN `task_id` CHAR(36),
  IN `assignee` VARCHAR(36),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
DELETE FROM `tasks_anonymous_assignees`
WHERE `tasks_anonymous_assignees`.`task_id` = `task_id`
  AND `tasks_anonymous_assignees`.`assignee` = `assignee`
  AND EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tasks_anonymous_assignees`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'remove',
    'anonymousAssignees',
    `assignee`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure add_invited_assignee
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `add_invited_assignee` (
  IN `task_id` CHAR(36),
  IN `assignee` VARCHAR(50),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
INSERT INTO `tasks_invited_assignees` (`task_id`, `assignee`)
SELECT `task_id`,
  `assignee`
FROM (
    SELECT `task_id` AS `task_id`,
      `assignee` AS `assignee`
  ) AS `tmp`
WHERE EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tmp`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'append',
    'invitedAssignees',
    `assignee`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure remove_invited_assignee
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `remove_invited_assignee` (
  IN `task_id` CHAR(36),
  IN `assignee` VARCHAR(50),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
DELETE FROM `tasks_invited_assignees`
WHERE `tasks_invited_assignees`.`task_id` = `task_id`
  AND `tasks_invited_assignees`.`assignee` = `assignee`
  AND EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tasks_invited_assignees`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'remove',
    'invitedAssignees',
    `assignee`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure add_watcher
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `add_watcher` (
  IN `task_id` CHAR(36),
  IN `watcher` CHAR(16),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
INSERT INTO `tasks_watchers` (`task_id`, `watcher`)
SELECT `task_id`,
  `watcher`
FROM (
    SELECT `task_id` AS `task_id`,
      `watcher` AS `watcher`
  ) AS `tmp`
WHERE EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tmp`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'append',
    'watchers',
    `watcher`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure remove_watcher
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `remove_watcher` (
  IN `task_id` CHAR(36),
  IN `watcher` CHAR(16),
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `project_id` CHAR(36);
DECLARE `hint` LONGTEXT;
DECLARE `recipients` JSON;
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
DELETE FROM `tasks_watchers`
WHERE `tasks_watchers`.`task_id` = `task_id`
  AND `tasks_watchers`.`watcher` = `watcher`
  AND EXISTS (
    SELECT *
    FROM `tasks`
    WHERE `tasks_watchers`.`task_id` = `tasks`.`id`
      AND (
        EXISTS (
          SELECT *
          FROM `projects`
          WHERE `tasks`.`project_id` = `projects`.`id`
            AND (
              `projects`.`owner` = `client`
              OR (
                `projects`.`privacy` = 'public'
                AND `projects`.`permissions` = 'rw'
              )
            )
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    NULL,
    `mutation_id`,
    'remove',
    'watchers',
    `watcher`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure create_comment
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `create_comment` (
  IN `id` CHAR(36),
  IN `task_id` CHAR(36),
  IN `content` LONGTEXT,
  IN `client` CHAR(16),
  IN `mutation_id` CHAR(54)
)
BEGIN
DECLARE `recipients` JSON;
DECLARE `hint` LONGTEXT;
DECLARE `project_id` CHAR(36);
DECLARE `task_permalink` LONGTEXT;
SELECT `tasks`.`project_id`, `tasks`.`task`, `tasks`.`permalink`
INTO `project_id`, `hint`, `task_permalink`
FROM `tasks`
WHERE `tasks`.`id` = `task_id`;
SELECT CONCAT (
  `projects`.`owner`,
  "/",
  `projects`.`permalink`,
  "/",
  `task_permalink`
) INTO `task_permalink`
FROM `projects`
WHERE `projects`.`id` = `project_id`;
SET `recipients` = "{";
INSERT INTO `comments` (
    `id`,
    `task_id`,
    `content`,
    `owner`
  )
SELECT `id`,
  `task_id`,
  `content`,
  `owner`
FROM (
    SELECT `id` AS `id`,
      `task_id` AS `task_id`,
      `content` AS `content`,
      `client` AS `owner`
  ) AS `tmp`
WHERE EXISTS (
  SELECT *
  FROM `tasks`
  INNER JOIN `projects` ON `tasks`.`project_id` = `projects`.`id`
  WHERE `tasks`.`id` = `tmp`.`task_id`
    AND (
      `projects`.`owner` = `tmp`.`owner`
      OR (
        `projects`.`privacy` = 'public'
        AND `projects`.`permissions` = 'rw'
      )
      OR EXISTS (
        SELECT *
        FROM `projects_members`
        WHERE `tasks`.`project_id` = `projects_members`.`project_id`
          AND `projects_members`.`member` = `tmp`.`owner`
      )
    )
  );
IF ROW_COUNT() > 0 THEN
  CALL notify_task_watcher(
    `project_id`,
    `task_id`,
    `id`,
    `mutation_id`,
    'create',
    'comment',
    `content`,
    `client`,
    `recipients`
  );
END IF;
SET `recipients` = CONCAT(`recipients`, "}");
SELECT recipients, project_id, hint, task_permalink;
END$$

-- -----------------------------------------------------
-- procedure delete_comment
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE delete_comment (
  IN `id` CHAR(36),
  IN `client` CHAR(16),
  OUT `task_id` CHAR(36)
)
BEGIN
SELECT `comments`.`task_id`
INTO `task_id`
FROM `comments`
WHERE `comments`.`id` = `id`;
DELETE FROM `comments`
WHERE `comments`.`id` = `id`
AND `comments`.`owner` = `client`;
END$$

-- -----------------------------------------------------
-- procedure list_comments_by_task_id
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_comments_by_task_id (
  IN `task_id` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
SELECT `comments`.`id`,
  `comments`.`task_id` AS 'taskId',
  `comments`.`content`,
  `comments`.`owner`,
  `comments`.`created_at` AS 'createdAt',
  `comments`.`updated_at` AS 'updatedAt'
FROM `comments`
WHERE `comments`.`task_id` = `task_id`
  AND EXISTS (
    SELECT *
    FROM `tasks`
    INNER JOIN `projects` ON `tasks`.`project_id` = `projects`.`id`
    WHERE `tasks`.`id` = `task_id`
      AND (
        `projects`.`owner` = `client`
        OR (
          `projects`.`privacy` = 'public'
          AND `projects`.`permissions` = 'rw'
        )
        OR EXISTS (
          SELECT *
          FROM `projects_members`
          WHERE `tasks`.`project_id` = `projects_members`.`project_id`
            AND `projects_members`.`member` = `client`
        )
      )
    );
END$$

-- -----------------------------------------------------
-- procedure dismiss_notification
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE dismiss_notification (
  IN `notification_id` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
DELETE FROM `notifications`
WHERE `notifications`.`id` = `notification_id`
  AND `notifications`.`owner` = `client`;
END$$

-- -----------------------------------------------------
-- procedure dismiss_notifications
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE dismiss_notifications (
  IN `client` CHAR(16)
)
BEGIN
DELETE FROM `notifications`
WHERE `notifications`.`owner` = `client`;
END$$

-- -----------------------------------------------------
-- procedure list_notifications
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_notifications (
  IN `client` CHAR(16)
)
BEGIN
SELECT `notifications`.`id`,
  `history`.`project_id` AS 'projectId',
  `history`.`task_id` AS 'taskId',
  `history`.`comment_id` AS 'commentId',
  `history`.`action`,
  `history`.`field`,
  (
    CASE
      WHEN (`history`.`field` = 'status') THEN (
        SELECT `statuses`.`title`
        FROM `statuses`
        WHERE `statuses`.`id` = `history`.`value`
      )
      ELSE (
        SELECT `history`.`value`
      )
    END
  ) AS `value`,
  `notifications`.`read`,
  (
    CASE
      WHEN (`history`.`task_id` IS NOT NULL) THEN (
        SELECT `tasks`.`task`
        FROM `tasks`
        WHERE `tasks`.`id` = `history`.`task_id`
      )
      ELSE (
        SELECT `projects`.`title`
        FROM `projects`
        WHERE `projects`.`id` = `history`.`project_id`
      )
    END
  ) AS `hint`,
  (
    CASE
      WHEN (`history`.`task_id` IS NOT NULL) THEN (
        SELECT CONCAT (
          `projects`.`owner`,
          "/",
          `projects`.`permalink`,
          "/",
          `tasks`.`permalink`
        )
        FROM `tasks`
        INNER JOIN `projects` ON `tasks`.`project_id` = `projects`.`id`
        WHERE `tasks`.`id` = `history`.`task_id`
      )
      ELSE (
        SELECT CONCAT (
          `projects`.`owner`,
          "/",
          `projects`.`permalink`
        )
        FROM `projects`
        WHERE `projects`.`id` = `history`.`project_id`
      )
    END
  ) AS `link`,
  `history`.`owner` AS `mutator`,
  `notifications`.`created_at` AS 'createdAt',
  `notifications`.`updated_at` AS 'updatedAt',
  `notifications`.`owner`
FROM `notifications`
INNER JOIN `history` AS `history` ON `notifications`.`history_id` = `history`.`id`
WHERE `notifications`.`owner` = `client`;
END$$

-- -----------------------------------------------------
-- procedure list_history_by_task_id
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE list_history_by_task_id (
  IN `task_id` CHAR(36),
  IN `client` CHAR(16)
)
BEGIN
IF EXISTS (
  SELECT *
  FROM `tasks`
  INNER JOIN `projects` ON `tasks`.`project_id` = `projects`.`id`
  WHERE `tasks`.`id` = `task_id`
    AND (
      `projects`.`owner` = `client`
      OR (
        `projects`.`privacy` = 'public'
        AND `projects`.`permissions` = 'rw'
      )
      OR EXISTS (
        SELECT *
        FROM `projects_members`
        WHERE `tasks`.`project_id` = `projects_members`.`project_id`
          AND `projects_members`.`member` = `client`
      )
    )
  ) THEN
SELECT `history`.`id`,
  `history`.`action`,
  `history`.`field`,
  `history`.`value`,
  `history`.`owner`,
  `history`.`created_at` AS 'createdAt',
  `history`.`updated_at` AS 'updatedAt'
FROM `history`
WHERE `history`.`task_id` = `task_id`
  AND `history`.`comment_id` IS NULL
ORDER BY `history`.`created_at` DESC;
END IF;
END$$

-- -----------------------------------------------------
-- procedure create_user
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE create_user (
  IN `username` CHAR(16),
  IN `first_name` VARCHAR(16),
  IN `last_name` VARCHAR(16),
  IN `email` VARCHAR(50)
)
BEGIN
DECLARE `loop_done` BOOLEAN DEFAULT FALSE;
DECLARE `task_id` CHAR(36) DEFAULT "";
DECLARE `cur_task_id` CURSOR FOR
SELECT `tasks_invited_assignees`.`task_id`
FROM `tasks_invited_assignees`
WHERE `tasks_invited_assignees`.`assignee` = `email`;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET `loop_done` = TRUE;
INSERT INTO `users` (
    `username`,
    `first_name`,
    `last_name`,
    `email`
  )
VALUES(
    `username`,
    `first_name`,
    `last_name`,
    `email`
  );
OPEN `cur_task_id`;
SET `loop_done` = FALSE;
`get_task_id`: LOOP FETCH `cur_task_id` INTO `task_id`;
IF `loop_done` = TRUE THEN
  LEAVE `get_task_id`;
END IF;
INSERT INTO `tasks_assignees` (
    `task_id`,
    `assignee`
  )
VALUES (
    `task_id`,
    `username`
  );
END LOOP `get_task_id`;
CLOSE `cur_task_id`;
DELETE FROM `tasks_invited_assignees`
WHERE `tasks_invited_assignees`.`assignee` = `email`;
END$$

-- -----------------------------------------------------
-- procedure update_user
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE update_user (
  IN `username` CHAR(16),
  IN `new_first_name` VARCHAR(16),
  IN `new_last_name` VARCHAR(16)
)
BEGIN
UPDATE `users`
SET `users`.`first_name` = `new_first_name`,
  `users`.`last_name` = `new_last_name`
WHERE `users`.`username` = `username`;
END$$

-- -----------------------------------------------------
-- procedure get_user_by_username
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `get_user_by_username` (
  IN `username` CHAR(16)
)
BEGIN
SELECT `users`.`username`,
  `users`.`first_name` AS 'firstName',
  `users`.`last_name` AS 'lastName',
  `users`.`email`,
  `users`.`created_at` AS 'createdAt',
  `users`.`updated_at` AS 'updatedAt'
FROM `users`
WHERE `users`.`username` = `username`;
END$$

-- -----------------------------------------------------
-- procedure search_user_to_assign
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `search_user_to_assign` (
  IN `query` CHAR(16),
  IN `task_id` CHAR(36)
)
BEGIN
SELECT `users`.`username`,
  `users`.`first_name` AS 'firstName',
  `users`.`last_name` AS 'lastName',
  `users`.`email`,
  `users`.`created_at` AS 'createdAt',
  `users`.`updated_at` AS 'updatedAt'
FROM `users`
WHERE (
    CONCAT(`users`.`first_name`, ' ', `users`.`last_name`) LIKE CONCAT(`query`, '%')
    OR `users`.`username` LIKE CONCAT(`query`, '%')
    OR `users`.`email` LIKE CONCAT(`query`, '%')
  ) AND NOT EXISTS (
    SELECT *
    FROM `tasks_assignees`
    WHERE `tasks_assignees`.`task_id` = `task_id`
      AND `tasks_assignees`.`assignee` = `users`.`username`
  );
END$$

-- -----------------------------------------------------
-- procedure search_user_to_watch
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE `search_user_to_watch` (
  IN `query` CHAR(16),
  IN `task_id` CHAR(36)
)
BEGIN
SELECT `users`.`username`,
  `users`.`first_name` AS 'firstName',
  `users`.`last_name` AS 'lastName',
  `users`.`email`,
  `users`.`created_at` AS 'createdAt',
  `users`.`updated_at` AS 'updatedAt'
FROM `users`
WHERE (
    CONCAT(`users`.`first_name`, ' ', `users`.`last_name`) LIKE CONCAT(`query`, '%')
    OR `users`.`username` LIKE CONCAT(`query`, '%')
    OR `users`.`email` LIKE CONCAT(`query`, '%')
  ) AND NOT EXISTS (
    SELECT *
    FROM `tasks_watchers`
    WHERE `tasks_watchers`.`task_id` = `task_id`
      AND `tasks_watchers`.`watcher` = `users`.`username`
  );
END$$

-- -----------------------------------------------------
-- procedure is_project_shared_with_client
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE is_project_shared_with_client (
  IN `project_id` CHAR(36),
  IN `client` CHAR(16),
  OUT `shared` BOOLEAN
)
BEGIN
IF EXISTS (SELECT *
FROM `projects`
WHERE `projects`.`id` = `project_id`
  AND (
    `projects`.`owner` = `client`
    OR `projects`.`privacy` = 'public'
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `projects`.id = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  )) THEN
  SET `shared` = TRUE;
ELSE
  SET `shared` = FALSE;
END IF;
END$$

-- -----------------------------------------------------
-- procedure is_task_shared_with_client
-- -----------------------------------------------------
CREATE OR REPLACE PROCEDURE is_task_shared_with_client (
  IN `task_id` CHAR(36),
  IN `client` CHAR(16),
  OUT `shared` BOOLEAN
)
BEGIN
IF EXISTS (SELECT *
FROM `tasks`
WHERE `tasks`.`id` = `task_id`
  AND (
    EXISTS (
      SELECT *
      FROM `projects`
      WHERE `tasks`.`project_id` = `projects`.`id`
        AND (
          `projects`.`owner` = `client`
          OR `projects`.`privacy` = 'public'
        )
    )
    OR EXISTS (
      SELECT *
      FROM `projects_members`
      WHERE `tasks`.`project_id` = `projects_members`.`project_id`
        AND `projects_members`.`member` = `client`
    )
  )) THEN
  SET `shared` = TRUE;
ELSE
  SET `shared` = FALSE;
END IF;
END$$

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
